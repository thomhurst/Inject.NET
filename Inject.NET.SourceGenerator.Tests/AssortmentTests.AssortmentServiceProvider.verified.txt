[  
// <auto-generated />
#pragma warning disable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Interfaces;
using Inject.NET.Models;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class AssortmentServiceProvider
{
	public class ServiceProvider_(global::Inject.NET.Models.ServiceFactories serviceFactories) : global::Inject.NET.Services.ServiceProvider<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_>(serviceFactories, null)
	{
		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_? _singletons;
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_ Singletons => _singletons ??= new(this, serviceFactories);
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_ CreateTypedScope() => new(this, serviceFactories);
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();
			_ = Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0;
			_ = Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0;
			_ = Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0;
			_ = scope.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0;

			await base.InitializeAsync();
		}
	}
	public class SingletonScope_ : global::Inject.NET.Services.SingletonScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_>
	{
		public SingletonScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}
		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0;
			}

			return base.GetService(serviceKey, originatingScope);
		}

		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1? _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0;
		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0 => _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0 ??= Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1());

		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2? _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0;
		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0 => _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0 ??= Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class2(Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0));

		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3? _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0;
		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0 => _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0 ??= Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class3(Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0));
	}
	public class ServiceScope_ : global::Inject.NET.Services.ServiceScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_>
	{
		public ServiceScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1> Inject__NET__SourceGenerator__Sample__ServiceProviders__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__Class1_____0 => Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>(this.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>()));
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>> Inject__NET__SourceGenerator__Sample__ServiceProviders__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__Class1_____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__Class1_____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0 => Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0;
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1> Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0 => Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0;
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2> Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0 => Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0;
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3> Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface4____0 => Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class4(Singletons.Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0));
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4> Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface4____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface4____0];

		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5? _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0;
		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5 Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0 => _inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0 ??= Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class5(global::Inject.NET.ThrowHelpers.Throw<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4>("Injecting type Class4 with a lifetime of Transient into an object with a lifetime of Scoped will cause it to also be Scoped")));
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5> Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper Inject__NET__SourceGenerator__Sample__ServiceProviders__Wrapper____0 => Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>(this.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>())));
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper> Inject__NET__SourceGenerator__Sample__ServiceProviders__Wrapper____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__Wrapper____0];

		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__Class1_____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__Class1_____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface4____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface4____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Wrapper____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__Wrapper____0Enumerable;
			}
			return base.GetService(serviceKey, originatingScope);
		}

		public override IReadOnlyList<object> GetServices(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<>), Key = null })
			{
				return [];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__Class1_____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface1____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface2____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface3____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface4____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__Interface5____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__Wrapper____0];
			}
			return base.GetServices(serviceKey, originatingScope);
		}
	}
	public class ServiceRegistrar_ : global::Inject.NET.Services.ServiceRegistrar<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_>
	{
		public ServiceRegistrar_()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1),
				Lifetime = Inject.NET.Enums.Lifetime.Singleton,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1()
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class2),
				Lifetime = Inject.NET.Enums.Lifetime.Singleton,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class2(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface1>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class3),
				Lifetime = Inject.NET.Enums.Lifetime.Singleton,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class3(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface2>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class4),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class4(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface3>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Wrapper(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface5),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class5),
				Lifetime = Inject.NET.Enums.Lifetime.Scoped,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class5(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Interface4>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<>),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Generic<>),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				Activator.CreateInstance(typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Generic<>).MakeGenericType(type.GenericTypeArguments), scope.GetService(type.GenericTypeArguments[0]))
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.Class1>())
			});

		}

		public override async ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_> BuildAsync(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_ parent)
{
    var serviceProvider = new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_(ServiceFactoryBuilders.AsReadOnly());
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public static ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.AssortmentServiceProvider.ServiceProvider_> BuildAsync() =>
		new ServiceRegistrar_().BuildAsync(null);
}

]