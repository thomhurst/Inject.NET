[  
using System;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public class TransientImplementationOnlyServiceRegistrar : ServiceRegistrar
{
	public TransientImplementationOnlyServiceRegistrar()
	{
		Register(new global::Inject.NET.Models.ServiceDescriptor
		{
			ServiceType = typeof(Class1),
			ImplementationType = typeof(Class1),
			Lifetime = Inject.NET.Enums.Lifetime.Transient,
			Factory = (scope, type, key) =>
			new Class1()
		});

	}
}

  
using System;
using System.Threading.Tasks;
using Inject.NET.Enums;
using Inject.NET.Interfaces;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class TransientImplementationOnly
{
	public static ValueTask<IServiceProviderRoot> BuildAsync() =>
		new TransientImplementationOnlyServiceRegistrar().BuildAsync();
}

]