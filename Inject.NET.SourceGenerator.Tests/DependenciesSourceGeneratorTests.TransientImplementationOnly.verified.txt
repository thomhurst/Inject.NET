[  
// <auto-generated />
#pragma warning disable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Interfaces;
using Inject.NET.Models;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class TransientImplementationOnly
{
	public class ServiceProvider_(global::Inject.NET.Models.ServiceFactories serviceFactories) : global::Inject.NET.Services.ServiceProvider<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_>(serviceFactories, null)
	{
		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_? _singletons;
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_ Singletons => _singletons ??= new(this, serviceFactories);
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_ CreateTypedScope() => new(this, serviceFactories);
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();

			await base.InitializeAsync();
		}
	}
	public class SingletonScope_ : global::Inject.NET.Services.SingletonScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_>
	{
		public SingletonScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}
		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{

			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceScope_ : global::Inject.NET.Services.ServiceScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_>
	{
		public ServiceScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}

		public Class1 Class1____0 => Register<Class1>(new Class1());

		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(Class1), Key = null })
			{
				return Class1____0;
			}
			return base.GetService(serviceKey, originatingScope);
		}

		public override IReadOnlyList<object> GetServices(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(Class1), Key = null })
			{
				return [Class1____0];
			}
			return base.GetServices(serviceKey, originatingScope);
		}
	}
	public class ServiceRegistrar_ : global::Inject.NET.Services.ServiceRegistrar<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_>
	{
		public ServiceRegistrar_()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(Class1),
				ImplementationType = typeof(Class1),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new Class1()
			});

		}

		public override async ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_> BuildAsync(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_ parent)
{
    var serviceProvider = new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_(ServiceFactoryBuilders.AsReadOnly());
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public static ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.TransientImplementationOnly.ServiceProvider_> BuildAsync() =>
		new ServiceRegistrar_().BuildAsync(null);
}

]