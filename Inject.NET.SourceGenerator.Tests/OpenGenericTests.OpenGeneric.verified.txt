[  
// <auto-generated />
#pragma warning disable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Interfaces;
using Inject.NET.Models;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class OpenGeneric
{
	public class ServiceProvider_(global::Inject.NET.Models.ServiceFactories serviceFactories) : global::Inject.NET.Services.ServiceProvider<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_>(serviceFactories, null)
	{
		private global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_? _singletons;
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_ Singletons => _singletons ??= new(this, serviceFactories);
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_ CreateTypedScope() => new(this, serviceFactories);
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();

			await base.InitializeAsync();
		}
	}
	public class SingletonScope_ : global::Inject.NET.Services.SingletonScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_>
	{
		public SingletonScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}
		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{

			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceScope_ : global::Inject.NET.Services.ServiceScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_>
	{
		public ServiceScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1 Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1____0 => Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1());
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1> Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1> Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1_____0 => Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1()));
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>> Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1_____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1_____0];

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Wrapper____0 => Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1())));
		public IReadOnlyList<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper> Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Wrapper____0Enumerable => [Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Wrapper____0];

		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1_____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1_____0Enumerable;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Wrapper____0;
			}
			if (serviceKey.Key == null && global::Inject.NET.Helpers.TypeHelper.IsEnumerable<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper>(serviceKey.Type))
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Wrapper____0Enumerable;
			}
			return base.GetService(serviceKey, originatingScope);
		}

		public override IReadOnlyList<object> GetServices(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<>), Key = null })
			{
				return [];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__IGeneric_Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Class1_____0];
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper), Key = null })
			{
				return [Inject__NET__SourceGenerator__Sample__ServiceProviders__OpenGeneric__Wrapper____0];
			}
			return base.GetServices(serviceKey, originatingScope);
		}
	}
	public class ServiceRegistrar_ : global::Inject.NET.Services.ServiceRegistrar<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_>
	{
		public ServiceRegistrar_()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1()
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Wrapper(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<>),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Generic<>),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				Activator.CreateInstance(typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Generic<>).MakeGenericType(type.GenericTypeArguments), scope.GetService(type.GenericTypeArguments[0]))
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.IGeneric<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Generic<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.Class1>())
			});

		}

		public override async ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_> BuildAsync(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_ parent)
{
    var serviceProvider = new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_(ServiceFactoryBuilders.AsReadOnly());
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public static ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.OpenGeneric.ServiceProvider_> BuildAsync() =>
		new ServiceRegistrar_().BuildAsync(null);
}

]