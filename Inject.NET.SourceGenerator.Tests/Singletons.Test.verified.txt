[  
// <auto-generated />
#pragma warning disable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Interfaces;
using Inject.NET.Models;
using Inject.NET.Services;

namespace Inject.NET.Tests;

public partial class Singletons
{
	public partial class SingletonServiceProvider
	{
		public class ServiceProvider_(global::Inject.NET.Models.ServiceFactories serviceFactories) : global::Inject.NET.Services.ServiceProvider<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_>(serviceFactories, null)
		{
			[field: AllowNull, MaybeNull]
			public override global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_ Singletons => field ??= new(this, serviceFactories);
			public override global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_ CreateTypedScope() => new(this, serviceFactories);
			[field: AllowNull, MaybeNull]
			public ServiceProvider_NonOverridingTenant Tenant_NonOverridingTenant { get; private set; } = null!;
			[field: AllowNull, MaybeNull]
			public ServiceProvider_OverridingTenant Tenant_OverridingTenant { get; private set; } = null!;
			public override async ValueTask InitializeAsync()
			{
				await Singletons.InitializeAsync();
				await using var scope = CreateTypedScope();
				_ = Singletons.Inject__NET__Tests__Singletons__SingletonClass____0;
				Tenant_NonOverridingTenant = await ServiceProvider_NonOverridingTenant.BuildAsync(this);
				Register<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.NonOverridingTenant>(Tenant_NonOverridingTenant);
				Tenant_OverridingTenant = await ServiceProvider_OverridingTenant.BuildAsync(this);
				Register<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.OverridingTenant>(Tenant_OverridingTenant);

				await base.InitializeAsync();
			}
		}
		public class SingletonScope_ : global::Inject.NET.Services.SingletonScope<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public SingletonScope_(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
			{
			}
			public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass____0;
				}

				return base.GetService(serviceKey, originatingScope);
			}

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass____0 => field ??= Register<global::Inject.NET.Tests.Singletons.SingletonClass>(new global::Inject.NET.Tests.Singletons.SingletonClass());
		}
		public class ServiceScope_ : global::Inject.NET.Services.ServiceScope<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public ServiceScope_(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
			{
			}

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass____0 => Singletons.Inject__NET__Tests__Singletons__SingletonClass____0;

			public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass____0;
				}
				return base.GetService(serviceKey, originatingScope);
			}

			public override IReadOnlyList<object> GetServices(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return [Inject__NET__Tests__Singletons__SingletonClass____0];
				}
				return base.GetServices(serviceKey, originatingScope);
			}
		}
		public class ServiceRegistrar_ : global::Inject.NET.Services.ServiceRegistrar<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public ServiceRegistrar_()
			{
				Register(new global::Inject.NET.Models.ServiceDescriptor
				{
					ServiceType = typeof(global::Inject.NET.Tests.Singletons.SingletonClass),
					ImplementationType = typeof(global::Inject.NET.Tests.Singletons.SingletonClass),
					Lifetime = Inject.NET.Enums.Lifetime.Singleton,
					Factory = (scope, type, key) =>
					new global::Inject.NET.Tests.Singletons.SingletonClass()
				});

			}

			public override async ValueTask<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_> BuildAsync(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ parent)
{
    var serviceProvider = new global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_(ServiceFactoryBuilders.AsReadOnly());
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
		}
		public partial class ServiceProvider_NonOverridingTenant(ServiceFactories serviceFactories, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ parent) : global::Inject.NET.Services.ServiceProvider<ServiceProvider_NonOverridingTenant, SingletonScope_NonOverridingTenant, ServiceScope_NonOverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_>(serviceFactories, parent)
		{
			[field: AllowNull, MaybeNull]
			public override SingletonScope_NonOverridingTenant Singletons => field ??= new(this, serviceFactories, parent.Singletons);
			public override ServiceScope_NonOverridingTenant CreateTypedScope() => new ServiceScope_NonOverridingTenant(this, serviceFactories, parent.CreateTypedScope());
			public static ValueTask<ServiceProvider_NonOverridingTenant> BuildAsync(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ serviceProvider) =>
				new ServiceRegistrarNonOverridingTenant().BuildAsync(serviceProvider);
			public override async ValueTask InitializeAsync()
			{
				await Singletons.InitializeAsync();
				await using var scope = CreateTypedScope();

				await base.InitializeAsync();
			}
		}
		public class SingletonScope_NonOverridingTenant : global::Inject.NET.Services.SingletonScope<SingletonScope_NonOverridingTenant, ServiceProvider_NonOverridingTenant, ServiceScope_NonOverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public SingletonScope_NonOverridingTenant(ServiceProvider_NonOverridingTenant serviceProvider, ServiceFactories serviceFactories, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
			{
			}

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass____0 => ParentScope.Inject__NET__Tests__Singletons__SingletonClass____0;

			public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass____0;
				}
				return base.GetService(serviceKey, originatingScope);
			}
		}
		public class ServiceScope_NonOverridingTenant : global::Inject.NET.Services.ServiceScope<ServiceScope_NonOverridingTenant, ServiceProvider_NonOverridingTenant, SingletonScope_NonOverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public ServiceScope_NonOverridingTenant(ServiceProvider_NonOverridingTenant serviceProvider, ServiceFactories serviceFactories, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
			{
			}

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass____0 => Singletons.Inject__NET__Tests__Singletons__SingletonClass____0;

			public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass____0;
				}
				return base.GetService(serviceKey, originatingScope);
			}

			public override IReadOnlyList<object> GetServices(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return [Inject__NET__Tests__Singletons__SingletonClass____0];
				}
				return base.GetServices(serviceKey, originatingScope);
			}
		}
		public class ServiceRegistrarNonOverridingTenant : global::Inject.NET.Services.ServiceRegistrar<ServiceProvider_NonOverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public ServiceRegistrarNonOverridingTenant()
			{
			}

			public override async ValueTask<ServiceProvider_NonOverridingTenant> BuildAsync(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ parentServiceProvider)
{
    var serviceProvider = new ServiceProvider_NonOverridingTenant(ServiceFactoryBuilders.AsReadOnly(), parentServiceProvider!);
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
		}
		public partial class ServiceProvider_OverridingTenant(ServiceFactories serviceFactories, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ parent) : global::Inject.NET.Services.ServiceProvider<ServiceProvider_OverridingTenant, SingletonScope_OverridingTenant, ServiceScope_OverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_>(serviceFactories, parent)
		{
			[field: AllowNull, MaybeNull]
			public override SingletonScope_OverridingTenant Singletons => field ??= new(this, serviceFactories, parent.Singletons);
			public override ServiceScope_OverridingTenant CreateTypedScope() => new ServiceScope_OverridingTenant(this, serviceFactories, parent.CreateTypedScope());
			public static ValueTask<ServiceProvider_OverridingTenant> BuildAsync(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ serviceProvider) =>
				new ServiceRegistrarOverridingTenant().BuildAsync(serviceProvider);
			public override async ValueTask InitializeAsync()
			{
				await Singletons.InitializeAsync();
				await using var scope = CreateTypedScope();
				_ = Singletons.Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0;

				await base.InitializeAsync();
			}
		}
		public class SingletonScope_OverridingTenant : global::Inject.NET.Services.SingletonScope<SingletonScope_OverridingTenant, ServiceProvider_OverridingTenant, ServiceScope_OverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public SingletonScope_OverridingTenant(ServiceProvider_OverridingTenant serviceProvider, ServiceFactories serviceFactories, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
			{
			}

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass____0 => ParentScope.Inject__NET__Tests__Singletons__SingletonClass____0;

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0 => field ??= Register<global::Inject.NET.Tests.Singletons.SingletonClass>(new global::Inject.NET.Tests.Singletons.SingletonClass());

			public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass____0;
				}
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0;
				}
				return base.GetService(serviceKey, originatingScope);
			}
		}
		public class ServiceScope_OverridingTenant : global::Inject.NET.Services.ServiceScope<ServiceScope_OverridingTenant, ServiceProvider_OverridingTenant, SingletonScope_OverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.SingletonScope_, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public ServiceScope_OverridingTenant(ServiceProvider_OverridingTenant serviceProvider, ServiceFactories serviceFactories, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
			{
			}

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass____0 => Singletons.Inject__NET__Tests__Singletons__SingletonClass____0;

			[field: AllowNull, MaybeNull]
			public global::Inject.NET.Tests.Singletons.SingletonClass Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0 => Singletons.Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0;

			public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass____0;
				}
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0;
				}
				return base.GetService(serviceKey, originatingScope);
			}

			public override IReadOnlyList<object> GetServices(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
			{
				if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.Tests.Singletons.SingletonClass), Key = null })
				{
					return [Inject__NET__Tests__Singletons__SingletonClass____0, Inject__NET__Tests__Singletons__SingletonClass__OverridingTenant__0];
				}
				return base.GetServices(serviceKey, originatingScope);
			}
		}
		public class ServiceRegistrarOverridingTenant : global::Inject.NET.Services.ServiceRegistrar<ServiceProvider_OverridingTenant, global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_>
		{
			public ServiceRegistrarOverridingTenant()
			{
				Register(new global::Inject.NET.Models.ServiceDescriptor
				{
					ServiceType = typeof(global::Inject.NET.Tests.Singletons.SingletonClass),
					ImplementationType = typeof(global::Inject.NET.Tests.Singletons.SingletonClass),
					Lifetime = Inject.NET.Enums.Lifetime.Singleton,
					Factory = (scope, type, key) =>
					new global::Inject.NET.Tests.Singletons.SingletonClass()
				});

			}

			public override async ValueTask<ServiceProvider_OverridingTenant> BuildAsync(global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_ parentServiceProvider)
{
    var serviceProvider = new ServiceProvider_OverridingTenant(ServiceFactoryBuilders.AsReadOnly(), parentServiceProvider!);
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
		}
		public static ValueTask<global::Inject.NET.Tests.Singletons.SingletonServiceProvider.ServiceProvider_> BuildAsync() =>
			new ServiceRegistrar_().BuildAsync(null);
	}
}

]