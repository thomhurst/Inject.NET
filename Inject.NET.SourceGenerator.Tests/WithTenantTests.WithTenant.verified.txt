[  
// <auto-generated />
#pragma warning disable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Interfaces;
using Inject.NET.Models;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class WithTenant
{
	public class ServiceProvider_(global::Inject.NET.Models.ServiceFactories serviceFactories) : global::Inject.NET.Services.ServiceProvider<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_>(serviceFactories, null)
	{
		[field: AllowNull, MaybeNull]
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_ Singletons => field ??= new(this, serviceFactories);
		public override global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_ CreateTypedScope() => new(this, serviceFactories);
		[field: AllowNull, MaybeNull]
		public ServiceProvider_Tenant Tenant_Tenant { get; private set; } = null!;
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();
			_ = Singletons.Inject__NET__SourceGenerator__Sample__Models__Class1;
			Tenant_Tenant = await ServiceProvider_Tenant.BuildAsync(this);
			Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.Tenant>(Tenant_Tenant);

			await base.InitializeAsync();
		}
	}
	public class SingletonScope_ : global::Inject.NET.Services.SingletonScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_>
	{
		public SingletonScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}
		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__Models__Class1;
			}

			return base.GetService(serviceKey, originatingScope);
		}

		[field: AllowNull, MaybeNull]
		public global::Inject.NET.SourceGenerator.Sample.Models.Class1 Inject__NET__SourceGenerator__Sample__Models__Class1 => field ??= Register<global::Inject.NET.SourceGenerator.Sample.Models.Class1>(new global::Inject.NET.SourceGenerator.Sample.Models.Class1());
	}
	public class ServiceScope_ : global::Inject.NET.Services.ServiceScope<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_>
	{
		public ServiceScope_(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}

		[field: AllowNull, MaybeNull]
		public global::Inject.NET.SourceGenerator.Sample.Models.Class1 Inject__NET__SourceGenerator__Sample__Models__Class1 => field ??= Singletons.Inject__NET__SourceGenerator__Sample__Models__Class1;

		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__Models__Class1;
			}
			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceRegistrar_ : global::Inject.NET.Services.ServiceRegistrar<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_>
	{
		public ServiceRegistrar_()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1),
				Lifetime = Inject.NET.Enums.Lifetime.Singleton,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.Models.Class1()
			});

		}

		public override async ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_> BuildAsync(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_ parent)
{
    var serviceProvider = new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_(ServiceFactoryBuilders.AsReadOnly());
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public partial class ServiceProvider_Tenant(ServiceFactories serviceFactories, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_ parent) : global::Inject.NET.Services.ServiceProvider<ServiceProvider_Tenant, SingletonScope_Tenant, ServiceScope_Tenant, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_>(serviceFactories, parent)
	{
		[field: AllowNull, MaybeNull]
		public override SingletonScope_Tenant Singletons => field ??= new(this, serviceFactories, parent.Singletons);
		public override ServiceScope_Tenant CreateTypedScope() => new ServiceScope_Tenant(this, serviceFactories, parent.CreateTypedScope());
		public static ValueTask<ServiceProvider_Tenant> BuildAsync(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_ serviceProvider) =>
			new ServiceRegistrarTenant().BuildAsync(serviceProvider);
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();
			_ = Singletons.Inject__NET__SourceGenerator__Sample__Models__InheritsFromClass1;

			await base.InitializeAsync();
		}
	}
	public class SingletonScope_Tenant : global::Inject.NET.Services.SingletonScope<SingletonScope_Tenant, ServiceProvider_Tenant, ServiceScope_Tenant, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_>
	{
		public SingletonScope_Tenant(ServiceProvider_Tenant serviceProvider, ServiceFactories serviceFactories, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
		{
		}

		[field: AllowNull, MaybeNull]
		public global::Inject.NET.SourceGenerator.Sample.Models.Class1 Inject__NET__SourceGenerator__Sample__Models__Class1 => field ??= ParentScope.Inject__NET__SourceGenerator__Sample__Models__Class1;

		[field: AllowNull, MaybeNull]
		public global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1 Inject__NET__SourceGenerator__Sample__Models__InheritsFromClass1 => field ??= Register<global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1>(new global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1());

		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__Models__Class1;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__Models__InheritsFromClass1;
			}
			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceScope_Tenant : global::Inject.NET.Services.ServiceScope<ServiceScope_Tenant, ServiceProvider_Tenant, SingletonScope_Tenant, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.SingletonScope_, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_>
	{
		public ServiceScope_Tenant(ServiceProvider_Tenant serviceProvider, ServiceFactories serviceFactories, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
		{
		}

		[field: AllowNull, MaybeNull]
		public global::Inject.NET.SourceGenerator.Sample.Models.Class1 Inject__NET__SourceGenerator__Sample__Models__Class1 => field ??= Register<global::Inject.NET.SourceGenerator.Sample.Models.Class1>(new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1), Key = null }, Singletons.Inject__NET__SourceGenerator__Sample__Models__Class1);

		[field: AllowNull, MaybeNull]
		public global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1 Inject__NET__SourceGenerator__Sample__Models__InheritsFromClass1 => field ??= Register<global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1>(new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1), Key = null }, Singletons.Inject__NET__SourceGenerator__Sample__Models__InheritsFromClass1);

		public override object GetService(global::Inject.NET.Models.ServiceKey serviceKey, Inject.NET.Interfaces.IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.Class1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__Models__Class1;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__Models__InheritsFromClass1;
			}
			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceRegistrarTenant : global::Inject.NET.Services.ServiceRegistrar<ServiceProvider_Tenant, global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_>
	{
		public ServiceRegistrarTenant()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1),
				Lifetime = Inject.NET.Enums.Lifetime.Singleton,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1()
			});

		}

		public override async ValueTask<ServiceProvider_Tenant> BuildAsync(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_ parentServiceProvider)
{
    var serviceProvider = new ServiceProvider_Tenant(ServiceFactoryBuilders.AsReadOnly(), parentServiceProvider!);
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public static ValueTask<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenant.ServiceProvider_> BuildAsync() =>
		new ServiceRegistrar_().BuildAsync(null);
}

]