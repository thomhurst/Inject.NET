[  
using System;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Services;
namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;
public class WithTenantServiceRegistrar : ServiceRegistrar
{
	public WithTenantServiceRegistrar()
	{
		{
			var tenant = GetOrCreateTenant("tenant1");
			tenant.Register<global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1>((scope, type) => new global::Inject.NET.SourceGenerator.Sample.Models.InheritsFromClass1(), Lifetime.Singleton);
		}
		Register<global::Inject.NET.SourceGenerator.Sample.Models.Class1>((scope, type) => new global::Inject.NET.SourceGenerator.Sample.Models.Class1(), Lifetime.Singleton);
	}
}

  
using System;
using System.Threading.Tasks;
using Inject.NET.Enums;
using Inject.NET.Interfaces;
namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;
public partial class WithTenant
{
	public static Task<ITenantedServiceProvider> BuildAsync() =>
	new WithTenantServiceRegistrar().BuildAsync();
}

]