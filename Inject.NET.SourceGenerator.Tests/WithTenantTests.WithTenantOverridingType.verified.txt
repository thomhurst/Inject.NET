[  
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Interfaces;
using Inject.NET.Models;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class WithTenantOverridingType
{
	public class ServiceRegistrar_ : global::Inject.NET.Services.ServiceRegistrar<ServiceProvider_, ServiceProvider_>
	{
		public ServiceRegistrar_()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent(scope.GetRequiredService<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild>())
			});

			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1()
			});

		}

		public override async ValueTask<ServiceProvider_> BuildAsync(ServiceProvider_? parent)
{
    var serviceProvider = new ServiceProvider_(ServiceFactoryBuilders.AsReadOnly());
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public class SingletonScope_ : global::Inject.NET.Services.SingletonScope<SingletonScope_, ServiceProvider_, ServiceScope_, SingletonScope_, ServiceScope_, ServiceProvider_>
	{
		public SingletonScope_(ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}
		public override object? GetService(ServiceKey serviceKey, IServiceScope originatingScope)
		{

			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceScope_ : global::Inject.NET.Services.ServiceScope<ServiceScope_, ServiceProvider_, SingletonScope_, ServiceScope_, SingletonScope_, ServiceProvider_>
	{
		public ServiceScope_(ServiceProvider_ serviceProvider, ServiceFactories serviceFactories) : base(serviceProvider, serviceFactories, null)
		{
		}

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__IChild => new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1();

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__Parent => new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1());

		public override object? GetService(ServiceKey serviceKey, IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__IChild;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__Parent;
			}
			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceProvider_(global::Inject.NET.Models.ServiceFactories serviceFactories) : global::Inject.NET.Services.ServiceProvider<ServiceProvider_, SingletonScope_, ServiceScope_, ServiceProvider_, SingletonScope_, ServiceScope_>(serviceFactories, null)
	{
		[field: AllowNull, MaybeNull]
		public override SingletonScope_ Singletons => field ??= new(this, serviceFactories);
		public override ServiceScope_ CreateTypedScope() => new ServiceScope_(this, serviceFactories);
		[field: AllowNull, MaybeNull]
		public ServiceProvider_Tenant Tenant_Tenant { get; private set; } = null!;
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();
			Tenant_Tenant = await ServiceProvider_Tenant.BuildAsync(this);
			Register<global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Tenant>(Tenant_Tenant);

			await base.InitializeAsync();
		}
	}
	public class ServiceRegistrarTenant : global::Inject.NET.Services.ServiceRegistrar<ServiceProvider_Tenant, ServiceProvider_>
	{
		public ServiceRegistrarTenant()
		{
			Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1()
			});

		}

		public override async ValueTask<ServiceProvider_Tenant> BuildAsync(ServiceProvider_? parentServiceProvider)
{
    var serviceProvider = new ServiceProvider_Tenant(ServiceFactoryBuilders.AsReadOnly(), parentServiceProvider!);
    
    var vt = serviceProvider.InitializeAsync();

    if (!vt.IsCompletedSuccessfully)
    {
        await vt.ConfigureAwait(false);
    }
    
    return serviceProvider;
}
	}
	public class SingletonScope_Tenant : global::Inject.NET.Services.SingletonScope<SingletonScope_Tenant, ServiceProvider_Tenant, ServiceScope_Tenant, SingletonScope_, ServiceScope_, ServiceProvider_>
	{
		public SingletonScope_Tenant(ServiceProvider_Tenant serviceProvider, ServiceFactories serviceFactories, SingletonScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
		{
		}

		public override object? GetService(ServiceKey serviceKey, IServiceScope originatingScope)
		{
			return base.GetService(serviceKey, originatingScope);
		}
	}
	public class ServiceScope_Tenant : global::Inject.NET.Services.ServiceScope<ServiceScope_Tenant, ServiceProvider_Tenant, SingletonScope_Tenant, ServiceScope_, SingletonScope_, ServiceProvider_>
	{
		public ServiceScope_Tenant(ServiceProvider_Tenant serviceProvider, ServiceFactories serviceFactories, ServiceScope_ parentScope) : base(serviceProvider, serviceFactories, parentScope)
		{
		}

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__IChild => new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1();

		public global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__Parent => new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent(new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1());

		public override object? GetService(ServiceKey serviceKey, IServiceScope originatingScope)
		{
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__IChild;
			}
			if (serviceKey == new ServiceKey { Type = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent), Key = null })
			{
				return Inject__NET__SourceGenerator__Sample__ServiceProviders__WithTenantOverridingType__Parent;
			}
			return base.GetService(serviceKey, originatingScope);
		}
	}
	public partial class ServiceProvider_Tenant(ServiceFactories serviceFactories, ServiceProvider_ parent) : global::Inject.NET.Services.ServiceProvider<ServiceProvider_Tenant, SingletonScope_Tenant, ServiceScope_Tenant, ServiceProvider_, SingletonScope_, ServiceScope_>(serviceFactories, parent)
	{
		[field: AllowNull, MaybeNull]
		public override SingletonScope_Tenant Singletons => field ??= new(this, serviceFactories, parent.Singletons);
		public override ServiceScope_Tenant CreateTypedScope() => new ServiceScope_Tenant(this, serviceFactories, parent.CreateTypedScope());
		public static ValueTask<ServiceProvider_Tenant> BuildAsync(ServiceProvider_ serviceProvider) =>
			new ServiceRegistrarTenant().BuildAsync(serviceProvider);
		public override async ValueTask InitializeAsync()
		{
			await Singletons.InitializeAsync();
			await using var scope = CreateTypedScope();

			await base.InitializeAsync();
		}
	}
	public static ValueTask<ServiceProvider_> BuildAsync() =>
		new ServiceRegistrar_().BuildAsync(null);
}

]