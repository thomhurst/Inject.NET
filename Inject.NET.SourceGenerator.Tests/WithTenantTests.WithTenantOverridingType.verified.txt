[  
using System;
using System.Linq;
using Inject.NET.Enums;
using Inject.NET.Extensions;
using Inject.NET.Services;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public class WithTenantOverridingTypeServiceRegistrar : ServiceRegistrar
{
	public WithTenantOverridingTypeServiceRegistrar()
	{
		Register(new global::Inject.NET.Models.ServiceDescriptor
		{
			ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent),
			ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent),
			Lifetime = Inject.NET.Enums.Lifetime.Transient,
			Factory = (scope, type, key) =>
			new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent((global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild)new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1())
		});

		Register(new global::Inject.NET.Models.ServiceDescriptor
		{
			ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild),
			ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1),
			Lifetime = Inject.NET.Enums.Lifetime.Transient,
			Factory = (scope, type, key) =>
			new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Child1()
		});

		{
			var tenant = GetOrCreateTenant("tenant1");
			tenant.Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1()
			});

			tenant.Register(new global::Inject.NET.Models.ServiceDescriptor
			{
				ServiceType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent),
				ImplementationType = typeof(global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent),
				Lifetime = Inject.NET.Enums.Lifetime.Transient,
				Factory = (scope, type, key) =>
				new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.Parent((global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.IChild)new global::Inject.NET.SourceGenerator.Sample.ServiceProviders.WithTenantOverridingType.TenantChild1())
			});

		}
	}
}

  
using System;
using System.Threading.Tasks;
using Inject.NET.Enums;
using Inject.NET.Interfaces;

namespace Inject.NET.SourceGenerator.Sample.ServiceProviders;

public partial class WithTenantOverridingType
{
	public static ValueTask<IServiceProviderRoot> BuildAsync() =>
		new WithTenantOverridingTypeServiceRegistrar().BuildAsync();
}

]