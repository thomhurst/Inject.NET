using Inject.NET.SourceGenerator.Helpers;
using Inject.NET.SourceGenerator.Models;
using Microsoft.CodeAnalysis;

namespace Inject.NET.SourceGenerator.Writers;

internal static class MainWriter
{
    public static void GenerateServiceProviderCode(SourceProductionContext sourceProductionContext, TypedServiceProviderModel serviceProviderModel, Compilation compilation)
    {
        var sourceCodeWriter = new SourceCodeWriter();
        
        sourceCodeWriter.WriteLine("// <auto-generated />");
        sourceCodeWriter.WriteLine("#pragma warning disable");
        sourceCodeWriter.WriteLine("using System;");
        sourceCodeWriter.WriteLine("using System.Diagnostics.CodeAnalysis;");
        sourceCodeWriter.WriteLine("using System.Linq;");
        sourceCodeWriter.WriteLine("using Inject.NET.Enums;");
        sourceCodeWriter.WriteLine("using Inject.NET.Extensions;");
        sourceCodeWriter.WriteLine("using Inject.NET.Interfaces;");
        sourceCodeWriter.WriteLine("using Inject.NET.Models;");
        sourceCodeWriter.WriteLine("using Inject.NET.Services;");
        sourceCodeWriter.WriteLine();

        var serviceProviderType = serviceProviderModel.Type;
        
        if (serviceProviderType.ContainingNamespace is { IsGlobalNamespace: false })
        {
            sourceCodeWriter.WriteLine($"namespace {serviceProviderType.ContainingNamespace.ToDisplayString()};");
            sourceCodeWriter.WriteLine();
        }

        var nestedClassCount = 0;
        var parent = serviceProviderType.ContainingType;

        while (parent is not null)
        {
            nestedClassCount++;
            sourceCodeWriter.WriteLine($"public partial class {parent.Name}");
            sourceCodeWriter.WriteLine("{");
            parent = parent.ContainingType;
        }
        
        var dependencyInjectionAttributeType = compilation.GetTypeByMetadataName("Inject.NET.Attributes.IDependencyInjectionAttribute");

        var withTenantAttributeType = compilation.GetTypeByMetadataName("Inject.NET.Attributes.WithTenantAttribute`1");
        
        var attributes = serviceProviderModel.Type.GetAttributes();
        
        var dependencyAttributes = attributes
            .Where(x => x.AttributeClass?.AllInterfaces.Contains(dependencyInjectionAttributeType,
                SymbolEqualityComparer.Default) == true)
            .ToArray();
        
        var withTenantAttributes = attributes
            .Where(x => x.AttributeClass?.IsGenericType is true && SymbolEqualityComparer.Default.Equals(withTenantAttributeType, x.AttributeClass.OriginalDefinition))
            .ToArray();

        var rootDependencies = DependencyDictionary.Create(compilation, dependencyAttributes, null);

        var tenants = TenantHelper.ConstructTenants(compilation, withTenantAttributes, rootDependencies);

        var serviceModelCollection = TypeCollector.Collect(serviceProviderModel, compilation);
        
        if (serviceModelCollection.Services
            .Select(x => x.Value)
            .Any(services => 
                services.Any(serviceModel => sourceProductionContext.HasConflicts(serviceModel, serviceModelCollection.Services))
            ))
        {
            return;
        }

        if (serviceModelCollection.Tenants
            .Select(x => x.Value)
            .Any(tenant =>
                tenant.Services
                    .Select(x => x.Value)
                    .Any(services =>
                        services.Any(
                            serviceModel => sourceProductionContext.HasConflicts(serviceModel, tenant.Services))
                    )
            ))
        {
            return;
        }

        sourceCodeWriter.WriteLine($"public partial class {serviceProviderType.Name}");
        sourceCodeWriter.WriteLine("{");

        ServiceProviderWriter.Write(sourceProductionContext, sourceCodeWriter, serviceProviderModel, serviceModelCollection, tenants);
        SingletonScopeWriter.Write(sourceCodeWriter, serviceProviderModel, serviceModelCollection);
        ScopeWriter.Write(sourceCodeWriter, serviceProviderModel, serviceModelCollection);
        ServiceRegistrarWriter.Write(sourceCodeWriter, serviceProviderModel, rootDependencies);

        foreach (var tenant in tenants)
        {
            var tenantServices = serviceModelCollection.Tenants[tenant.TenantDefinition.GloballyQualified()];

            TenantServiceProviderWriter.Write(sourceCodeWriter, serviceProviderModel, serviceModelCollection, tenant);
            TenantSingletonScopeWriter.Write(sourceCodeWriter, serviceProviderModel, tenantServices);
            TenantScopeWriter.Write(sourceCodeWriter, serviceProviderModel, tenantServices);
            TenantServiceRegistrarWriter.Write(sourceCodeWriter, serviceProviderModel, tenantServices);
        }
        
        sourceCodeWriter.WriteLine(
            $"public static ValueTask<{serviceProviderModel.Prefix}ServiceProvider_> BuildAsync() =>");
        sourceCodeWriter.WriteLine($"\tnew ServiceRegistrar_().BuildAsync(null);");
        
        sourceCodeWriter.WriteLine("}");
        
        for (var i = 0; i < nestedClassCount; i++)
        {
            sourceCodeWriter.WriteLine("}");
        }

        sourceProductionContext.AddSource(
            $"{serviceProviderType.Name}ServiceProvider_{Guid.NewGuid():N}.g.cs",
            sourceCodeWriter.ToString()
        );
    }
}